/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DOCUMENT } from '@angular/common';
import { HttpBackend, HttpClient } from '@angular/common/http';
import { Inject, Optional, RendererFactory2, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { of as rxof, Observable, Subject } from 'rxjs';
import { catchError, filter, finalize, map, share, take, tap } from 'rxjs/operators';
import { cloneSVG, getIconDefinitionFromAbbr, getNameAndNamespace, getSecondaryColor, hasNamespace, isIconDefinition, replaceFillColor, warn, withSuffix, withSuffixAndColor } from '../utils';
import { DynamicLoadingTimeoutError, HttpModuleNotImport, IconNotFoundError, NameSpaceIsNotSpecifyError, SVGTagNotFoundError, UrlNotSafeError } from './icon.error';
/** @type {?} */
var JSONP_HANDLER_NAME = '__ant_icon_load';
var IconService = /** @class */ (function () {
    function IconService(_rendererFactory, _handler, _document, sanitizer) {
        this._rendererFactory = _rendererFactory;
        this._handler = _handler;
        this._document = _document;
        this.sanitizer = sanitizer;
        this.defaultTheme = 'outline';
        /**
         * All icon definitions would be registered here.
         */
        this._svgDefinitions = new Map();
        /**
         * Cache all rendered icons. Icons are identified by name, theme,
         * and for twotone icons, primary color and secondary color.
         */
        this._svgRenderedDefinitions = new Map();
        this._inProgressFetches = new Map();
        /**
         * Url prefix for fetching inline SVG by dynamic importing.
         */
        this._assetsUrlRoot = '';
        this._twoToneColorPalette = {
            primaryColor: '#333333',
            secondaryColor: '#E6E6E6'
        };
        /**
         * Record if a handler is registered.
         */
        this._enableJsonpLoading = false;
        this._jsonpIconLoad$ = new Subject();
        this._renderer = this._rendererFactory.createRenderer(null, null);
        if (this._handler) {
            this._http = new HttpClient(this._handler);
        }
    }
    Object.defineProperty(IconService.prototype, "twoToneColor", {
        get: /**
         * @return {?}
         */
        function () {
            // Make a copy to avoid unexpected changes.
            return (/** @type {?} */ (tslib_1.__assign({}, this._twoToneColorPalette)));
        },
        set: /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor;
            this._twoToneColorPalette.primaryColor = primaryColor;
            this._twoToneColorPalette.secondaryColor =
                secondaryColor || getSecondaryColor(primaryColor);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Call this method to switch to jsonp like loading.
     */
    /**
     * Call this method to switch to jsonp like loading.
     * @return {?}
     */
    IconService.prototype.useJsonpLoading = /**
     * Call this method to switch to jsonp like loading.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._enableJsonpLoading) {
            this._enableJsonpLoading = true;
            window[JSONP_HANDLER_NAME] = (/**
             * @param {?} icon
             * @return {?}
             */
            function (icon) {
                _this._jsonpIconLoad$.next(icon);
            });
        }
        else {
            warn('You are already using jsonp loading.');
        }
    };
    /**
     * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.
     * @param prefix
     */
    /**
     * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.
     * @param {?} prefix
     * @return {?}
     */
    IconService.prototype.changeAssetsSource = /**
     * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.
     * @param {?} prefix
     * @return {?}
     */
    function (prefix) {
        this._assetsUrlRoot = prefix.endsWith('/') ? prefix : prefix + '/';
    };
    /**
     * Add icons provided by ant design.
     * @param icons
     */
    /**
     * Add icons provided by ant design.
     * @param {...?} icons
     * @return {?}
     */
    IconService.prototype.addIcon = /**
     * Add icons provided by ant design.
     * @param {...?} icons
     * @return {?}
     */
    function () {
        var _this = this;
        var icons = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            icons[_i] = arguments[_i];
        }
        icons.forEach((/**
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            _this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
        }));
    };
    /**
     * Register an icon. Namespace is required.
     * @param type
     * @param literal
     */
    /**
     * Register an icon. Namespace is required.
     * @param {?} type
     * @param {?} literal
     * @return {?}
     */
    IconService.prototype.addIconLiteral = /**
     * Register an icon. Namespace is required.
     * @param {?} type
     * @param {?} literal
     * @return {?}
     */
    function (type, literal) {
        var _a = tslib_1.__read(getNameAndNamespace(type), 2), name = _a[0], namespace = _a[1];
        if (!namespace) {
            throw NameSpaceIsNotSpecifyError();
        }
        this.addIcon({ name: type, icon: literal });
    };
    /**
     * Remove all cache.
     */
    /**
     * Remove all cache.
     * @return {?}
     */
    IconService.prototype.clear = /**
     * Remove all cache.
     * @return {?}
     */
    function () {
        this._svgDefinitions.clear();
        this._svgRenderedDefinitions.clear();
    };
    /**
     * Get a rendered `SVGElement`.
     * @param icon
     * @param twoToneColor
     */
    /**
     * Get a rendered `SVGElement`.
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    IconService.prototype.getRenderedContent = /**
     * Get a rendered `SVGElement`.
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    function (icon, twoToneColor) {
        var _this = this;
        // If `icon` is a `IconDefinition`, go to the next step. If not, try to fetch it from cache.
        /** @type {?} */
        var definitionOrNull = isIconDefinition(icon)
            ? ((/** @type {?} */ (icon)))
            : this._svgDefinitions.get(icon) || null;
        // If `icon` is a `IconDefinition` of successfully fetch, wrap it in an `Observable`.
        // Otherwise try to fetch it from remote.
        /** @type {?} */
        var $iconDefinition = definitionOrNull
            ? rxof(definitionOrNull)
            : this._loadIconDynamically((/** @type {?} */ (icon)));
        // If finally get an `IconDefinition`, render and return it. Otherwise throw an error.
        return $iconDefinition.pipe(map((/**
         * @param {?} i
         * @return {?}
         */
        function (i) {
            if (!i) {
                throw IconNotFoundError((/** @type {?} */ (icon)));
            }
            return _this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
        })));
    };
    /**
     * @return {?}
     */
    IconService.prototype.getCachedIcons = /**
     * @return {?}
     */
    function () {
        return this._svgDefinitions;
    };
    /**
     * Get raw svg and assemble a `IconDefinition` object.
     * @param type
     */
    /**
     * Get raw svg and assemble a `IconDefinition` object.
     * @protected
     * @param {?} type
     * @return {?}
     */
    IconService.prototype._loadIconDynamically = /**
     * Get raw svg and assemble a `IconDefinition` object.
     * @protected
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        // If developer doesn't provide HTTP module nor enable jsonp loading, just throw an error.
        if (!this._http && !this._enableJsonpLoading) {
            return rxof(HttpModuleNotImport());
        }
        // If multi directive ask for the same icon at the same time,
        // request should only be fired once.
        /** @type {?} */
        var inProgress = this._inProgressFetches.get(type);
        if (!inProgress) {
            var _a = tslib_1.__read(getNameAndNamespace(type), 2), name_1 = _a[0], namespace = _a[1];
            // If the string has a namespace within, create a simple `IconDefinition`.
            /** @type {?} */
            var icon_1 = namespace
                ? { name: type, icon: '' }
                : getIconDefinitionFromAbbr(name_1);
            /** @type {?} */
            var suffix = this.useJsonpLoading ? '.js' : '.svg';
            /** @type {?} */
            var url = (namespace
                ? this._assetsUrlRoot + "assets/" + namespace + "/" + name_1
                : this._assetsUrlRoot + "assets/" + icon_1.theme + "/" + icon_1.name) + suffix;
            /** @type {?} */
            var safeUrl = this.sanitizer.sanitize(SecurityContext.URL, url);
            if (!safeUrl) {
                throw UrlNotSafeError(url);
            }
            /** @type {?} */
            var source = !this._enableJsonpLoading
                ? this._http
                    .get(safeUrl, { responseType: 'text' })
                    .pipe(map((/**
                 * @param {?} literal
                 * @return {?}
                 */
                function (literal) { return (tslib_1.__assign({}, icon_1, { icon: literal })); })))
                : this._loadIconDynamicallyWithJsonp(icon_1, safeUrl);
            inProgress = source.pipe(tap((/**
             * @param {?} definition
             * @return {?}
             */
            function (definition) { return _this.addIcon(definition); })), finalize((/**
             * @return {?}
             */
            function () { return _this._inProgressFetches.delete(type); })), catchError((/**
             * @return {?}
             */
            function () { return rxof(null); })), share());
            this._inProgressFetches.set(type, inProgress);
        }
        return inProgress;
    };
    /**
     * @protected
     * @param {?} icon
     * @param {?} url
     * @return {?}
     */
    IconService.prototype._loadIconDynamicallyWithJsonp = /**
     * @protected
     * @param {?} icon
     * @param {?} url
     * @return {?}
     */
    function (icon, url) {
        var _this = this;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) {
            /** @type {?} */
            var loader = _this._document.createElement('script');
            /** @type {?} */
            var timer = setTimeout((/**
             * @return {?}
             */
            function () {
                clean();
                subscriber.error(DynamicLoadingTimeoutError());
            }), 6000);
            loader.src = url;
            /**
             * @return {?}
             */
            function clean() {
                loader.parentNode.removeChild(loader);
                clearTimeout(timer);
            }
            _this._document.body.appendChild(loader);
            _this._jsonpIconLoad$
                .pipe(filter((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i.name === icon.name && i.theme === icon.theme; })), take(1))
                .subscribe((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                subscriber.next(i);
                clean();
            }));
        }));
    };
    /**
     * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.
     * @param icon
     * @param twoToneColor
     */
    /**
     * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.
     * @protected
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    IconService.prototype._loadSVGFromCacheOrCreateNew = /**
     * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.
     * @protected
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    function (icon, twoToneColor) {
        /** @type {?} */
        var svg;
        /** @type {?} */
        var pri = twoToneColor || this._twoToneColorPalette.primaryColor;
        /** @type {?} */
        var sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
        /** @type {?} */
        var key = icon.theme === 'twotone'
            ? withSuffixAndColor(icon.name, icon.theme, pri, sec)
            : icon.theme === undefined
                ? icon.name
                : withSuffix(icon.name, icon.theme);
        // Try to make a copy from cache.
        /** @type {?} */
        var cached = this._svgRenderedDefinitions.get(key);
        if (cached) {
            svg = cached.icon;
        }
        else {
            svg = this._setSVGAttribute(this._colorizeSVGIcon(
            // Icons provided by ant design should be refined to remove preset colors.
            this._createSVGElementFromString(hasNamespace(icon.name) ? icon.icon : replaceFillColor(icon.icon)), icon.theme === 'twotone', pri, sec));
            // Cache it.
            this._svgRenderedDefinitions.set(key, (/** @type {?} */ (tslib_1.__assign({}, icon, { icon: svg }))));
        }
        return cloneSVG(svg);
    };
    /**
     * @protected
     * @param {?} str
     * @return {?}
     */
    IconService.prototype._createSVGElementFromString = /**
     * @protected
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var div = this._document.createElement('div');
        div.innerHTML = str;
        /** @type {?} */
        var svg = div.querySelector('svg');
        if (!svg) {
            throw SVGTagNotFoundError;
        }
        return svg;
    };
    /**
     * @protected
     * @param {?} svg
     * @return {?}
     */
    IconService.prototype._setSVGAttribute = /**
     * @protected
     * @param {?} svg
     * @return {?}
     */
    function (svg) {
        this._renderer.setAttribute(svg, 'width', '1em');
        this._renderer.setAttribute(svg, 'height', '1em');
        return svg;
    };
    /**
     * @protected
     * @param {?} svg
     * @param {?} twotone
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    IconService.prototype._colorizeSVGIcon = /**
     * @protected
     * @param {?} svg
     * @param {?} twotone
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    function (svg, twotone, pri, sec) {
        if (twotone) {
            /** @type {?} */
            var children = svg.childNodes;
            /** @type {?} */
            var length_1 = children.length;
            for (var i = 0; i < length_1; i++) {
                /** @type {?} */
                var child = (/** @type {?} */ (children[i]));
                if (child.getAttribute('fill') === 'secondaryColor') {
                    this._renderer.setAttribute(child, 'fill', sec);
                }
                else {
                    this._renderer.setAttribute(child, 'fill', pri);
                }
            }
        }
        this._renderer.setAttribute(svg, 'fill', 'currentColor');
        return svg;
    };
    /** @nocollapse */
    IconService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: HttpBackend, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
        { type: DomSanitizer }
    ]; };
    return IconService;
}());
export { IconService };
if (false) {
    /** @type {?} */
    IconService.prototype.defaultTheme;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._renderer;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._http;
    /**
     * All icon definitions would be registered here.
     * @type {?}
     * @protected
     */
    IconService.prototype._svgDefinitions;
    /**
     * Cache all rendered icons. Icons are identified by name, theme,
     * and for twotone icons, primary color and secondary color.
     * @type {?}
     * @protected
     */
    IconService.prototype._svgRenderedDefinitions;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._inProgressFetches;
    /**
     * Url prefix for fetching inline SVG by dynamic importing.
     * @type {?}
     * @protected
     */
    IconService.prototype._assetsUrlRoot;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._twoToneColorPalette;
    /**
     * Record if a handler is registered.
     * @type {?}
     * @private
     */
    IconService.prototype._enableJsonpLoading;
    /**
     * @type {?}
     * @private
     */
    IconService.prototype._jsonpIconLoad$;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._rendererFactory;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._handler;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype._document;
    /**
     * @type {?}
     * @protected
     */
    IconService.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,